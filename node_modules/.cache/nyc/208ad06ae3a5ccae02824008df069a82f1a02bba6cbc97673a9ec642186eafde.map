{"version":3,"sources":["admin.js"],"names":["isAdmin","req","res","next","token","headers","authorization","split","body","decoded","jwt","verify","expiresIn","console","log","users","forEach","user","email","is_admin","status","send"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;AACA,IAAMA,OAAO,GAAI,SAAXA,OAAW,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAE7B,MAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,KAA2CN,GAAG,CAACO,IAAJ,CAASJ,KAAlE;;AAEA,MAAMK,OAAO,GAAEC,yBAAIC,MAAJ,CAAWP,KAAX,EAAkB,oBAAlB,EAAwC;AAAEQ,IAAAA,SAAS,EAAE;AAAb,GAAxC,CAAf;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;;AACFM,oBAAMC,OAAN,CAAc,UAACC,IAAD,EAAQ;AACpB,QAAGA,IAAI,CAACC,KAAL,KAAcT,OAAO,CAACS,KAAzB,EAA+B;AAC7B,UAAGT,OAAO,CAACU,QAAX,EAAoB;AAClBhB,QAAAA,IAAI;AACL;AACF;AACF,GAND;;AAQA,SAAOD,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,IAAAA,MAAM,EAAE,GAAV;AAAe,eAAU;AAAzB,GAArB,CAAP;AAED,CAhBL;;eAqBkBpB,O","sourceRoot":"/private/var/root/Documents/teamwork-backend/server/middleware","sourcesContent":["import jwt from 'jsonwebtoken';\nimport users from '../model/users'\n\n// to check if user is admin\nconst isAdmin =  (req, res, next) => {\n    \n        const token = req.headers.authorization.split(' ')[1] || req.body.token;\n\n        const decoded= jwt.verify(token, 'THIS IS MY SECRETE', { expiresIn: '7d' });\n        console.log(decoded);\n      users.forEach((user)=>{\n        if(user.email ===decoded.email){\n          if(decoded.is_admin){\n            next();\n          }\n        }\n      });\n\n      return res.status(401).send({ status: 401, 'message':'Unauthorized access'}); \n    \n    } \n    \n\n  \n  \n  export default  isAdmin;\n  "]}