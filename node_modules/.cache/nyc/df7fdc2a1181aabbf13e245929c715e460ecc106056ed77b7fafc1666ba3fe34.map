{"version":3,"sources":["article.js"],"names":["Article","req","res","getUser","jwt","decode","headers","authorization","split","newArticle","id","articles","length","title","body","article","createdOn","format","user_id","status","push","send","message","data","findArticle","find","t","article_id","parseInt","params","splice"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;IAEMA,O;;;;;;;;;kCAIgBC,G,EAAKC,G,EAAK;AAChC,UAAMC,OAAO,GAAGC,yBAAIC,MAAJ,CAAWJ,GAAG,CAACK,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAX,CAAhB;;AACA,UAAMC,UAAU,GAAG;AACnBC,QAAAA,EAAE,EAACC,oBAASC,MAAT,GAAkB,CADF;AAEnBC,QAAAA,KAAK,EAACZ,GAAG,CAACa,IAAJ,CAASD,KAFI;AAGnBE,QAAAA,OAAO,EAACd,GAAG,CAACa,IAAJ,CAASC,OAHE;AAInBC,QAAAA,SAAS,EAAC,0BAASC,MAAT,EAJS;AAKnBC,QAAAA,OAAO,EAAEf,OAAO,CAACe,OALE;AAMnBC,QAAAA,MAAM,EAAC;AANY,OAAnB;;AAUIR,0BAASS,IAAT,CAAcX,UAAd;;AAGJ,UAAGA,UAAH,EACCP,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAAEF,QAAAA,MAAM,EAAE,GAAV;AAAeG,QAAAA,OAAO,EAAC,8BAAvB;AAAsDC,QAAAA,IAAI,oBAAOd,UAAP;AAA1D,OAArB;AACD,aAAOP,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAAEF,QAAAA,MAAM,EAAE,GAAV;AAAc,mBAAU;AAAxB,OAArB,CAAP;AAEC;;;kCAEsBlB,G,EAAKC,G,EAAK;AAC/B,UAAMC,OAAO,GAAGC,yBAAIC,MAAJ,CAAWJ,GAAG,CAACK,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAX,CAAhB;;AACE,UAAMgB,WAAW,GAAKb,oBAASc,IAAT,CAAc,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,UAAF,KAAiBC,QAAQ,CAAC3B,GAAG,CAAC4B,MAAJ,CAAWF,UAAZ,CAA7B;AAAA,OAAf,CAAtB;;AACA,UAAGH,WAAH,EAAe;AAEZ,YAAGrB,OAAO,CAACe,OAAR,KAAoBM,WAAW,CAACN,OAAnC,EAA2C;AAC3CP,8BAASmB,MAAT,CAAgBN,WAAhB,EAA4B,CAA5B;;AAGC,iBAAOtB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAAEF,YAAAA,MAAM,EAAE,GAAV;AAAe,uBAAW,8BAA1B;AAA0DI,YAAAA,IAAI,EAAE;AAC1FV,cAAAA,KAAK,EAACW,WAAW,CAACX,KADwE;AAE1FE,cAAAA,OAAO,EAACS,WAAW,CAACT;AAFsE;AAAhE,WAArB,CAAP;AAGD,SAPA,MAQG;AACF,iBAAOb,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAAEF,YAAAA,MAAM,EAAE,GAAV;AAAe,uBAAU;AAAzB,WAArB,CAAP;AACD;AACD,OAbF,MAcM;AACA,eAAOjB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AAAEF,UAAAA,MAAM,EAAE,GAAV;AAAgB,qBAAU;AAA1B,SAArB,CAAP;AACJ;AACA;;;;;eAMSnB,O","sourceRoot":"/private/var/root/Documents/teamwork-backend/server/controllers","sourcesContent":["import articles  from '../model/article';\nimport moment from 'moment';\nimport jwt from 'jsonwebtoken';\n\nclass Article {\n    \n\n\nstatic  createArticle(req, res) {\nconst getUser = jwt.decode(req.headers.authorization.split(' ')[1]);\nconst newArticle = {\nid:articles.length + 1,\ntitle:req.body.title,\narticle:req.body.article,\ncreatedOn:moment().format(),\nuser_id: getUser.user_id,\nstatus:\"unshare\"\n\n};\n\n    articles.push(newArticle);\n\n\nif(newArticle)\n res.status(201).send({ status: 201, message:'article successfully created',data: { ...newArticle } });\nreturn res.status(400).send({ status: 400,'message':'article not created' });\n\n}\n\nstatic  deleteArticle (req, res) {\n  const getUser = jwt.decode(req.headers.authorization.split(' ')[1]);\n    const findArticle =   articles.find(t => t.article_id === parseInt(req.params.article_id));\n    if(findArticle){\n       \n       if(getUser.user_id === findArticle.user_id){\n       articles.splice(findArticle,1);\n\n  \n        return res.status(200).send({ status: 200, 'message': 'article successfully deleted', data: {\n          title:findArticle.title,\n          article:findArticle.article}});\n      }\n      else{\n        return res.status(400).send({ status: 400, 'message':'You did not make this article with article_id'});\n      }\n     } \n     else {\n          return res.status(400).send({ status: 400,  'message':'article not found!'});\n     }\n     }\n\n\n\n\n}\nexport default Article;"]}