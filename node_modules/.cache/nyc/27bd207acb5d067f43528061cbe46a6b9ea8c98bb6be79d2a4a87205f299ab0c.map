{"version":3,"sources":["validation.js"],"names":["Validation","req","res","next","schema","Joi","object","keys","email","string","minDomainSegments","required","first_name","strict","trim","regex","min","max","last_name","alphanum","gender","jobRole","checkValidator","validate","body","abortEarly","convert","error","errors","details","errArr","forEach","err","push","message","split","join","status","send"],"mappings":"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","sourceRoot":"/private/var/root/Documents/Teamwork/server/middleware","sourcesContent":["import Joi from '@hapi/joi';\n\n\n // all validation operation \n export class Validation {\n \n\n  // user attributes validator\n\n  static userValidator(req, res, next) {\n    const schema = Joi.object().keys({\n      email: Joi.string()\n        .email({ minDomainSegments: 2 })\n        .required(),\n      first_name: Joi.string()\n        .strict()\n        .trim()\n        .regex(/^([a-zA-Z]+\\s)*[a-zA-Z]+$/)\n        .min(2)\n        .max(30)\n        .required(),\n      last_name: Joi.string()\n        .alphanum()\n        .strict()\n        .trim()\n        .regex(/^([a-zA-Z]+\\s)*[a-zA-Z]+$/)\n        .min(2)\n        .max(30)\n        .required(),\n        gender: Joi.string()\n        .alphanum()\n        .strict()\n        .trim()\n        .regex(/^([a-zA-Z]+\\s)*[a-zA-Z]+$/)\n        .min(4)\n        .max(6)\n        .required(),\n        jobRole: Joi.string()\n        .alphanum()\n        .strict()\n        .trim()\n        .regex(/^([a-zA-Z]+\\s)*[a-zA-Z]+$/)\n        .min(2)\n        .required(),\n        jobRole: Joi.string()\n        .alphanum()\n        .strict()\n        .trim()\n        .regex(/^([a-zA-Z]+\\s)*[a-zA-Z]+$/)\n        .min(2)\n        .required(),\n      password: Joi.string()\n        .min(7)\n        .max(50)\n        .required(),\n      department: Joi.string()\n        .alphanum()\n        .strict()\n        .trim()\n        .regex(/^([a-zA-Z]+\\s)*[a-zA-Z]+$/)\n        .min(2)\n        .required(),\n      address: Joi.string()\n        .alphanum()\n        .strict()\n        .trim()\n        .regex(/^([a-zA-Z]+\\s)*[a-zA-Z]+$/)\n        .min(2)\n        .required(),\n\n    });\n    checkValidator(req, res, schema, next);\n\n\n\n  }\n\n\n\n}\n\nexport const checkValidator = (req, res, schema, next) => {\n  const { error } = Joi.validate(req.body, schema, {abortEarly: false,convert: true });\n  if (error) {\n    const errors = [];\n    const { details: errArr = [] } = error || {};\n    errArr.forEach(err => {\n      errors.push(err.message.split('\"').join(''));\n    });\n    \n    return res.status(400).send({ status: 400, 'message':errors}); \n \n  }\n  return next();\n\n};\n\n\n\n"]}