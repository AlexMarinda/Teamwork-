{"version":3,"sources":["index.js"],"names":["generateToken","payload","token","jwt","sign","expiresIn","verifyToken","req","res","next","headers","authorization","split","body","status","send","message","verify","encryptPass","password","bcrypt","hashSync","genSaltSync","checkPassword","hash","compareSync"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAIA;AAIA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,OAAO,EAAI;AAC/B,MAAMC,KAAK,GAAGC,yBAAIC,IAAJ,CAASH,OAAT,EACZ,oBADY,EACU;AAAEI,IAAAA,SAAS,EAAE;AAAb,GADV,CAAd;;AAEA,SAAOH,KAAP;AACD,CAJD,C,CAKA;;;;;AAEA,IAAMI,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAITP,YAAAA,KAJS,GAIDK,GAAG,CAACG,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,KAA2CL,GAAG,CAACM,IAAJ,CAASX,KAJnD,EAKf;;AALe,kBAOVA,KAAK,KAAK,EAPA;AAAA;AAAA;AAAA;;AAAA,6CAOWM,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,cAAAA,MAAM,EAAE,GAAV;AAAcE,cAAAA,OAAO,EAAE;AAAvB,aAArB,CAPX;;AAAA;AASdb,qCAAIc,MAAJ,CAAWf,KAAX,EAAkB,oBAAlB,EAAwC;AAAEG,cAAAA,SAAS,EAAE;AAAb,aAAxC;;AACAI,YAAAA,IAAI,GAVU,CAWhB;AAED;AACA;;AAdiB;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAiBTD,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,cAAAA,MAAM,EAAE,GAAV;AAAeE,cAAAA,OAAO,EAAC;AAAvB,aAArB,CAjBS;;AAAA;AAAA,6CAoBX,IApBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXV,WAAW;AAAA;AAAA;AAAA,GAAjB,C,CA2BA;;;;;AACC,IAAMY,WAAW,GAAG,SAAdA,WAAc,CAAAC,QAAQ;AAAA,SAAIC,mBAAOC,QAAP,CAAgBF,QAAhB,EAA0BC,mBAAOE,WAAP,CAAmB,EAAnB,CAA1B,CAAJ;AAAA,CAA5B,C,CAED;;;;;AACC,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAOL,QAAP,EAAmB;AACvC,SAAOC,mBAAOK,WAAP,CAAmBN,QAAnB,EAA6BK,IAA7B,CAAP;AACC,CAFH","sourceRoot":"/private/var/root/Documents/teamwork-backend/server/helpers","sourcesContent":["import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\nimport comments from '../model/comment';\n\n\n\n// Generate Token\n\n\n\nconst generateToken = payload => {\n  const token = jwt.sign(payload,\n    'THIS IS MY SECRETE', { expiresIn: '7d' });\n  return token;\n};\n// check token\n\nconst verifyToken = async (req, res, next) => {\n  \n \n  try {\n     const token = req.headers.authorization.split(' ')[1] || req.body.token;\n     //const token = req.headers.authorization;\n  \n      if (token === '') return res.status(403).send({ status: 403,message: 'Unauthorized access' });\n\n      jwt.verify(token, 'THIS IS MY SECRETE', { expiresIn: '7d' });\n      next();\n    //const decodedToken = await JWT.verify(token, process.env.JWT_SECRET,{ expiresIn: '24h' });\n    \n   // if (!decodedToken) return res.status(403).send({ status: 403, error: 'Failed to authenticate token' });\n   // return next();\n    \n  } catch (error) {\n    return res.status(400).send({ status: 400, message:'Invalid token' });\n  }\n\n  return true;\n};\n\n\n\n\n\n//encript password using bcrypt\n const encryptPass = password => bcrypt.hashSync(password, bcrypt.genSaltSync(10));\n\n//check password\n const checkPassword = (hash, password) =>{ \n   return bcrypt.compareSync(password, hash)\n   };\n\n\n   export { \n    verifyToken, generateToken,encryptPass, checkPassword\n  };"]}